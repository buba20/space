param (
    [string]$url = "http://localhost:3000",
    [string]$username = "admin",
    [string]$password = "admin",
    [string]$folderPath
)

function Get-FolderUidByTitle {
    param (
        [string]$title
    )
    $response = Invoke-RestMethod -Uri "$url/api/folders" -Method Get -Authentication Basic -Credential (New-Object System.Management.Automation.PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force)))
    
    foreach ($folder in $response) {
        if ($folder.title -eq $title) {
            return $folder.uid
        }
    }

    return $null
}

function Create-Folder {
    param (
        [string]$title,
        [string]$uid = $null,
        [string]$parentUid = $null
    )
    $body = @{
        title = $title
        uid = $uid
    }

    if ($parentUid) {
        $body.parentFolderUid = $parentUid
    }

    $jsonBody = $body | ConvertTo-Json
    $response = Invoke-RestMethod -Uri "$url/api/folders" -Method Post -Body $jsonBody -ContentType "application/json" -Authentication Basic -Credential (New-Object System.Management.Automation.PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force)))
    
    return $response.uid
}

function Ensure-FolderHierarchy {
    param (
        [string]$path
    )
    $folders = $path -split '\\'
    $parentUid = $null

    foreach ($folder in $folders) {
        if (-not [string]::IsNullOrWhiteSpace($folder)) {
            $existingUid = Get-FolderUidByTitle -title $folder

            if ($existingUid) {
                $parentUid = $existingUid
            } else {
                $parentUid = Create-Folder -title $folder -parentUid $parentUid
            }
        }
    }

    return $parentUid
}

# Główne wywołanie funkcji
$finalFolderUid = Ensure-FolderHierarchy -path $folderPath
Write-Output "Folder UID: $finalFolderUid"
