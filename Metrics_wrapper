from flask import Flask, Response
import requests
import os

app = Flask(__name__)

# Path to the directory we want to monitor
MONITORED_DIRECTORY = "/path/to/your/directory"

# External metrics endpoint
EXTERNAL_METRICS_URL = "http://external-service/metrics"

# Custom metrics for storage in Prometheus format
def custom_metrics():
    stats = os.statvfs(MONITORED_DIRECTORY)
    
    # Calculate total space, used space, and available space in bytes
    total_space = stats.f_blocks * stats.f_frsize
    available_space = stats.f_bavail * stats.f_frsize
    used_space = total_space - available_space

    # Return the storage metrics in Prometheus text format
    metrics = f"""
# HELP storage_used_bytes The total amount of used space in bytes
# TYPE storage_used_bytes gauge
storage_used_bytes {used_space}

# HELP storage_available_bytes The total amount of available space in bytes
# TYPE storage_available_bytes gauge
storage_available_bytes {available_space}

# HELP storage_total_bytes The total amount of space in bytes
# TYPE storage_total_bytes gauge
storage_total_bytes {total_space}
"""
    return metrics

@app.route('/metrics', methods=['GET'])
def metrics():
    try:
        # Fetch external metrics in Prometheus format
        response = requests.get(EXTERNAL_METRICS_URL)
        response.raise_for_status()  # Raise an error for bad responses
        external_metrics = response.text  # Assume response is in Prometheus text format

        # Add custom storage metrics to the external metrics
        all_metrics = external_metrics + custom_metrics()

        # Return the combined metrics to the client
        return Response(all_metrics, mimetype='text/plain'), 200

    except requests.exceptions.RequestException as e:
        # If there is any issue with fetching external metrics, return an error
        return Response(f"Error fetching external metrics: {str(e)}", mimetype='text/plain'), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
