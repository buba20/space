import http.server
import socketserver
import urllib.request
import os

# Port na którym serwer będzie działał
PORT = 5000

# External metrics endpoint
EXTERNAL_METRICS_URL = "http://external-service/metrics"

# Path to the directory we want to monitor
MONITORED_DIRECTORY = "/path/to/your/directory"

# Function to fetch external metrics from another service
def fetch_external_metrics():
    try:
        with urllib.request.urlopen(EXTERNAL_METRICS_URL) as response:
            return response.read().decode('utf-8')
    except Exception as e:
        return f"# Error fetching external metrics: {str(e)}\n"

# Custom metrics for storage in Prometheus format
def custom_metrics():
    stats = os.statvfs(MONITORED_DIRECTORY)
    
    # Calculate total space, used space, and available space in bytes
    total_space = stats.f_blocks * stats.f_frsize
    available_space = stats.f_bavail * stats.f_frsize
    used_space = total_space - available_space

    # Return the storage metrics in Prometheus text format
    metrics = f"""
# HELP storage_used_bytes The total amount of used space in bytes
# TYPE storage_used_bytes gauge
storage_used_bytes {used_space}

# HELP storage_available_bytes The total amount of available space in bytes
# TYPE storage_available_bytes gauge
storage_available_bytes {available_space}

# HELP storage_total_bytes The total amount of space in bytes
# TYPE storage_total_bytes gauge
storage_total_bytes {total_space}
"""
    return metrics

# Custom handler to serve /metrics endpoint
class MetricsHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/metrics":
            # Fetch external metrics
            external_metrics = fetch_external_metrics()

            # Combine external metrics with custom metrics
            all_metrics = external_metrics + custom_metrics()

            # Send response with combined metrics
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            self.wfile.write(all_metrics.encode('utf-8'))
        else:
            # Handle other paths with 404
            self.send_response(404)
            self.end_headers()

# Setting up the HTTP server
with socketserver.TCPServer(("", PORT), MetricsHandler) as httpd:
    print(f"Serving on port {PORT}")
    httpd.serve_forever()
